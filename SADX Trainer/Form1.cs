using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Windows.Forms;
using MetroFramework;
using MetroFramework.Design;
using MetroFramework.Fonts;
using ProcessMemory;
using System.IO;


//Ideas/Random Addresses Im messing with 
//03B0F0E0     PerfectChaosDebug 
//0x03D0F808 mindrawdistance
//0x03D0F968 maxdrawdistance
//0x03ABDC70 leveldrawdistance
//0x03ABDCA0 skyboxdrawdistance
//0x00406F70 checkmodeldistance
//DrawDistance    struc ; (sizeof=0x8, mappedto_148)
//03C4E460     ; SETObjData SETTable 0x1023 size
//03C4E460 +0x04 = first Task each task is  +0x10 from current (some will be 00000000 oh well only care about things that star with 0x110XXXXX)
//03C4E468 pointer to first Task in task list (first object in object list)
//0x0044AF38 - nop = render killplanes? lol
//0x0044AF50 - nop = disable killplanes lets gooooo
//0x00892960 / sonic.exe+492960 = render stuff? "screen_dist_multi"
//0x03C52520 - Fishing Cursor Y
//0x03C52524 - FishingLineLengthCopy
//0x03C52528 - Fishing Line Length
//0x03C5252C - rod tension
//0x03C52534 - Time Spent Reeling In 
//0x03C524EC - Rod Status
//0x03B27050 - points to Lure Task taskorker
//0x03C52500 - Fishing Task Pointer
//chao name is 0x03C8908A OR 0x03C8888A //FE 05 08 9D B2 03 C3 - inc byte ptr [03B29D08]
//setting 0x03B2B610 to 0xFE enables SuperSonic Story,



namespace SADX_Trainer
{
    public partial class Form1 : MetroFramework.Forms.MetroForm
    {
        public LevelIDs CurrentLevel { get; private set; }
        public int LockedObj { get; set; }
        public CharIDs CurrentChar { get; private set; }
        public StatusIDs CurrentStatus { get; private set; }
        public ClipLevels CurrentClipLevel;
        public float SavedPosX { get; set; }
        public float SavedPosY { get; set; }
        public float SavedPosZ { get; set; }
        public byte CurrentAct { get; private set; }
        public CameraIDs CurrentCamera { get; private set; }
        public int TaskWkStart { get; set; }
        public int TaskWkNext { get; set; }
        public int TaskWkCurrent { get; set; }
        public int TaskWkPtrNum { get; set; }
        public int SETObjDataPtr { get; set; }
        public int SETObjDataCurrent { get; set; }
        public int SETObjDataNext { get; set; }
        public GameModeIDs CurrentGameMode { get; private set; }
        public float TelePosX { get; set; }
        public float TelePosY { get; set; }
        public float TelePosZ { get; set; }
        public int CurrentChao { get; set; }
        public int MainObjSubPtrOLD { get; set; }


        [DllImport("kernel32.dll")]
        public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);
        [DllImport("kernel32.dll")]
        public static extern bool ReadProcessMemory(int hProcess,
        int lpBaseAddress, byte[] lpBuffer, int dwSize, ref int lpNumberOfBytesRead);
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            timer1.Start();
            CurrentChao = 0x03C8888A;
        }
        private void Timer1_Tick(object sender, EventArgs e) // ReFresh
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            if (localByName.Length == 0)
            {
                metroLabel6.Text = "Process Not Running";
                return;
            }
            else
            {
                metroLabel6.Text = "Process Is Running";
            }
            Process process = localByName[0];
            if (process.HasExited)
                return;
            short Rings = process.ReadInt16(0x03B0F0E4);
            if (metroCheckBox7.Checked)//L1 To levitate
            {
                int ptr = process.ReadInt32(0x03B3CDF0);//Points to Vertical Speed
                int offset = ptr + 0x3C;//Points to Vertical Speed
                if ((process.ReadByte(0x03B0E9D0) & 0x01) != 0 && CurrentStatus == StatusIDs.inGame)//checks if pressing down L1
                {
                    process.Write(offset, 0x3FA00000); //sets veritcal speed
                }
            }
            if (metroCheckBox8.Checked)//Rings 
            {
                if (process.ReadUInt32(0x00425AB0) == 0xE405C766) //checks to see if code is not nopped
                {
                    process.Write(0x00425AB0, 0x90909090);//write nop
                    process.Write(0x00425AB4, 0x90909090);//write nop
                    process.Write(0x00425AB8, 0x9090C390);//write nop
                }
            }
            if (metroCheckBox8.Checked == false)
            {
                if (process.ReadUInt32(0x00425AB0) == 0x90909090) //checks to see if code is nopped
                {
                    process.Write(0x00425AB0, 0xE405C766);//write OG code 
                    process.Write(0x00425AB4, 0x0003B0F0);//write OG code 03B0E9D0
                    process.Write(0x00425AB8, 0x9090C300);//write OG code 
                }
            }
            if (metroCheckBox9.Checked || metroCheckBox42.Checked)//lock held object locks the last held object
            {
                int ptr = process.ReadInt32(0x03B3CDF0);
                int offset = ptr + 0x68;
                int value = process.ReadInt32(offset);
                if (value != LockedObj)
                {
                    process.Write(offset, LockedObj);
                }
            }
            if (metroCheckBox10.Checked)//y for turbo
            {
                int ptr = process.ReadInt32(0x03B3CDF0);//points to horizontal speed
                int offset = ptr + 0x38;//points to horizontal speed
                if ((process.ReadByte(0x03B0E9D1) & 0x02) != 0 && CurrentStatus == StatusIDs.inGame) //checking if pressing Y
                {
                    process.Write(offset, 0x40de256e); //sets H+
                }
            }
            //Save Stuff Start
            byte[] SonicSave = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x76, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x08, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x07, 0x1E, 0x00, 0x08, 0x1E, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x00 };
            byte[] TailsSave = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0xFE, 0x00, 0x00, 0x3E, 0x29, 0x02, 0x00, 0x00, 0x14, 0x00, 0x00, 0x3A, 0x11, 0x00, 0x00, 0x68, 0x15, 0x00, 0x00, 0xFA, 0x14, 0x00, 0x00, 0xFC, 0x12, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00, 0x90, 0x15, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x14, 0x00, 0x00, 0x3C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x13, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x33, 0x01, 0x1E, 0x02, 0x01, 0x15, 0x33, 0x01, 0x08, 0x17, 0x01, 0x00, 0x01, 0x01, 0x1E, 0x14, 0x01, 0x1B, 0x31, 0x00, 0x17, 0x04, 0x00, 0x0F, 0x37, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x27, 0x2F, 0x00, 0x20, 0x2A, 0x63, 0x3B, 0x3B, 0x00, 0x17, 0x01, 0x00, 0x1B, 0x1C, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x1F, 0x00, 0x81, 0x00, 0x5E, 0x00, 0x2D, 0x00, 0x1C, 0x00, 0x8B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x49, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x1B, 0x76, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x08, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x07, 0x1E, 0x00, 0x08, 0x1E, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x81, 0x0D, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x01, 0x00, 0x64, 0x04, 0x03, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xBF, 0xFD, 0xBF, 0xFE, 0x7F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x33, 0xF7, 0xC3, 0x2F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x3B, 0xFE, 0x7C, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xDF, 0x16, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x08, 0x40, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x02, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x05, 0x00, 0x02, 0x1D, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x00 };
            byte[] KnuxSave = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xA2, 0x00, 0x00, 0xC9, 0x8F, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x10, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x0E, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x1C, 0x32, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x01, 0x32, 0x1F, 0x00, 0x1E, 0x15, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x08, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x07, 0x1E, 0x00, 0x08, 0x1E, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x42, 0x00, 0x01, 0x00, 0x37, 0x2C, 0x38, 0x10, 0x97, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3F, 0x07, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x1A, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x00 };
            byte[] AmySave = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x37, 0x00, 0x00, 0xA4, 0xEE, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x3A, 0x11, 0x00, 0x00, 0x68, 0x15, 0x00, 0x00, 0xFA, 0x14, 0x00, 0x00, 0xFC, 0x12, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x14, 0x00, 0x00, 0x3C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x13, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x33, 0x01, 0x1E, 0x02, 0x01, 0x15, 0x33, 0x01, 0x08, 0x17, 0x01, 0x00, 0x01, 0x01, 0x1E, 0x14, 0x63, 0x3B, 0x3B, 0x00, 0x17, 0x04, 0x00, 0x0F, 0x37, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x27, 0x2F, 0x00, 0x20, 0x2A, 0x63, 0x3B, 0x3B, 0x00, 0x17, 0x01, 0x00, 0x1B, 0x1C, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x1F, 0x00, 0x81, 0x00, 0x5E, 0x00, 0x2D, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x49, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x1B, 0x76, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x08, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x07, 0x1E, 0x00, 0x08, 0x1E, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x81, 0x0D, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x04, 0x03, 0x04, 0x04, 0x04, 0x04, 0x03, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xBF, 0xFD, 0x9F, 0xFE, 0x3F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x33, 0xF7, 0xC3, 0x2F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x3B, 0xFE, 0x7C, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xDF, 0x16, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x08, 0x40, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x05, 0x00, 0x02, 0x1D, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x00 };
            byte[] BigE102 = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0x00, 0x00, 0x8A, 0x5E, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x3A, 0x11, 0x00, 0x00, 0x68, 0x15, 0x00, 0x00, 0xFA, 0x14, 0x00, 0x00, 0xFC, 0x12, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x33, 0x01, 0x1E, 0x02, 0x01, 0x15, 0x33, 0x01, 0x08, 0x17, 0x01, 0x00, 0x01, 0x01, 0x1E, 0x14, 0x63, 0x3B, 0x3B, 0x00, 0x17, 0x04, 0x00, 0x0F, 0x37, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x1F, 0x00, 0x81, 0x00, 0x5E, 0x00, 0x2D, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x49, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x1B, 0x76, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x08, 0x00, 0x00, 0x06, 0x1E, 0x00, 0x07, 0x1E, 0x00, 0x08, 0x1E, 0x00, 0x02, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x04, 0x00, 0x00, 0x03, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x01, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xBF, 0xFD, 0x9F, 0xFE, 0x3F, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x3B, 0xFE, 0x7C, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x40, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x63, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0x00 };
            byte[] OneThirtySave = new byte[] { 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xA6, 0x00, 0x00, 0x4F, 0xD4, 0x30, 0x01, 0x18, 0x15, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00, 0xE2, 0x18, 0x00, 0x00, 0x06, 0x13, 0x00, 0x00, 0x3A, 0x11, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x70, 0x12, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00, 0x92, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x1E, 0x14, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00, 0x2A, 0x12, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00, 0x36, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x15, 0x00, 0x00, 0x52, 0x17, 0x00, 0x00, 0x06, 0x36, 0x00, 0x00, 0x76, 0x0C, 0x00, 0x00, 0x10, 0x18, 0x00, 0x00, 0xD4, 0x17, 0x00, 0x00, 0x96, 0x19, 0x00, 0x00, 0x24, 0x18, 0x00, 0x00, 0x7E, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x14, 0x00, 0x1D, 0x39, 0x00, 0x3B, 0x14, 0x01, 0x0A, 0x0E, 0x01, 0x05, 0x34, 0x01, 0x1D, 0x2D, 0x01, 0x23, 0x09, 0x00, 0x0C, 0x39, 0x00, 0x05, 0x14, 0x00, 0x38, 0x3A, 0x00, 0x16, 0x06, 0x00, 0x35, 0x00, 0x00, 0x1B, 0x0E, 0x01, 0x26, 0x28, 0x00, 0x0C, 0x0D, 0x00, 0x09, 0x12, 0x00, 0x07, 0x1B, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x05, 0x19, 0x00, 0x37, 0x28, 0x01, 0x3A, 0x3B, 0x03, 0x17, 0x04, 0x09, 0x21, 0x37, 0x0A, 0x3A, 0x1F, 0x0A, 0x15, 0x01, 0x03, 0x0E, 0x3A, 0x09, 0x2C, 0x0F, 0x00, 0x00, 0xD4, 0x00, 0x32, 0x00, 0x00, 0x00, 0xB5, 0x00, 0x32, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x32, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x23, 0x00, 0xA9, 0x00, 0x3F, 0x00, 0x09, 0x00, 0x0B, 0x00, 0x47, 0x00, 0x0F, 0x00, 0x13, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x52, 0x00, 0x07, 0x00, 0x34, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x3E, 0x00, 0x0A, 0x00, 0x1E, 0x00, 0x79, 0x00, 0x5A, 0x00, 0x59, 0x00, 0x74, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3A, 0x23, 0x09, 0x3A, 0x62, 0x09, 0x00, 0x00, 0x09, 0x2B, 0x4D, 0x09, 0x15, 0x0D, 0x02, 0x0F, 0x12, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x09, 0x30, 0x41, 0x01, 0x20, 0x4E, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x05, 0x11, 0x05, 0x0E, 0x00, 0x00, 0x10, 0x1E, 0x00, 0x02, 0x19, 0x14, 0x02, 0x19, 0x14, 0x02, 0x19, 0x14, 0x01, 0x00, 0x33, 0x01, 0x07, 0x20, 0x01, 0x11, 0x05, 0x00, 0x0E, 0x34, 0x00, 0x0F, 0x02, 0x00, 0x0F, 0x05, 0x05, 0x02, 0x0B, 0x04, 0x3B, 0x2B, 0x04, 0x00, 0x00, 0x00, 0x09, 0x37, 0x00, 0x0A, 0x1A, 0x00, 0x0A, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x28, 0x19, 0x7F, 0x7F, 0x47, 0x7A, 0x7F, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFD, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x77, 0xEE, 0xFD, 0xFD, 0xFF, 0xFF, 0x01, 0x00, 0x8F, 0xAF, 0xF7, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xF3, 0xAB, 0xFF, 0x3B, 0x00, 0x00, 0x00, 0x00, 0xE5, 0xBE, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xFD, 0xF9, 0xFF, 0xDF, 0x03, 0x00, 0x00, 0x00, 0xCE, 0x3B, 0xFE, 0x7C, 0x5F, 0x0F, 0x3F, 0x4F, 0xF5, 0x79, 0x77, 0x01, 0xFF, 0xF7, 0x27, 0x00, 0xFD, 0xFF, 0xF6, 0xAF, 0x01, 0x00, 0xB7, 0xFF, 0xAF, 0x00, 0x1F, 0xFF, 0x0D, 0x00, 0x1D, 0x00, 0xDF, 0x00, 0x1F, 0x00, 0x07, 0x00, 0x03, 0x00, 0x07, 0x00, 0x01, 0x00, 0xE0, 0xEF, 0xC3, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x02, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1A, 0xFF, 0xFF, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x21, 0x01, 0x21, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1D, 0xFF, 0xFF, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x21, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x21, 0xFF, 0xFF, 0x01, 0x40, 0x4C, 0x24, 0x1A, 0x12, 0x15, 0x21, 0x19, 0x44, 0x28, 0x01, 0x01, 0x01, 0x01, 0x22, 0x01, 0x0A, 0x04, 0x01, 0x1B, 0x1F, 0x17, 0x16, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x17, 0x17, 0x0B, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x01, 0x02, 0x01, 0x05, 0x01, 0x03, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x01, 0x01, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x72, 0x32, 0x1F, 0x0A, 0x01, 0x27, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x14, 0x03, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x05, 0x01, 0x01, 0x04, 0x01, 0x01, 0x01, 0x01, 0x04, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x7F, 0x96, 0x98, 0x00, 0x4A, 0x15, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0E, 0x38, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x11, 0x06, 0x5D, 0x00, 0x06, 0x09, 0x04, 0x20, 0x09, 0x17, 0x28, 0x09, 0x26, 0x25, 0x09, 0x22, 0x07, 0x09, 0x19, 0x2D, 0x09, 0x05, 0x0D, 0x09, 0x00, 0x00, 0x09, 0x00, 0x35, 0x7F, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0xA7, 0x03, 0x09, 0x00, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0D, 0x1E, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F };

            if (metroCheckBox22.Checked)//Sonic
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, SonicSave);//writes a clean new save file
                }
            }
            if (metroCheckBox15.Checked)//Tails
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, TailsSave);
                }
            }
            if (metroCheckBox17.Checked)//Knuckles
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, KnuxSave);
                }
            }
            if (metroCheckBox16.Checked)//Amy
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, AmySave);
                }
            }
            if (metroCheckBox14.Checked)//130 Emblem
            {
                if (CurrentStatus == StatusIDs.isMainMenu)// if checked and in mainmenu
                {
                    process.Write(0x03B2B368, OneThirtySave);//writes 100% 130 emblem save
                }

            }
            if (metroCheckBox18.Checked)//Big
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, BigE102);
                }
            }
            if (metroCheckBox19.Checked)//E102
            {
                if (CurrentStatus == StatusIDs.isMainMenu)
                {
                    process.Write(0x03B2B368, BigE102);
                }
            }
            //Save Stuff End
            //0x0044952B - sorta air walk
            //0x00449523 - sorta air walk2
            //Walk Thru walls info
            //0x00444C1D nop = walk thru some walls,  + hitbox might be just enough ? t
            //0x0044A66B nop = walk thru some more walls
            //0x007887D9 nop = run into walls doesnt bonk
            //0x004039A1 nop = things go invis lol 
            //0x00639901 nop = more things walkthru sorta 
            //0x0063A9E4 lamp post collision ?
            //0x0044A516 - walk into something and drop down
            //Walk Thru walls Start
            if (metroCheckBox23.Checked)//checks if checked and code is not nopped
            {
                if (process.ReadUInt32(0x00444C1D) == 0xFF37EEE8)
                {
                    process.Write(0x00444C1D, 0x90909090);
                    process.Write(0x00444C21, 0x10C48390);
                    process.Write(0x0044A66B, 0x90909090);
                    process.Write(0x0044A66F, 0x14C48390);
                    process.Write(0x007887D9, 0x90909090);
                    process.Write(0x007887DD, 0x74C08590);


                }
            }
            if (metroCheckBox23.Checked == false && process.ReadUInt32(0x00444C1D) == 0x90909090)//checks if not checked and code is nopped,
            {
                process.Write(0x00444C1D, 0xFF37EEE8);
                process.Write(0x00444C21, 0x10C483FF);
                process.Write(0x0044A66B, 0xFFA430E8);
                process.Write(0x0044A66F, 0x14C483FF);
                process.Write(0x007887D9, 0x00D042E8);
                process.Write(0x007887DD, 0x74C08500);
            }
            //Walk Thru walls end
            //Player Collision Start
            if (metroCheckBox25.Checked)
            {
                if (CurrentChar == CharIDs.Sonic && process.ReadUInt32(0x0049BF52) == 0xF80329E8)
                {
                    process.Write(0x0049BF52, 0x90909090); //nops
                    process.Write(0x0049BF56, 0x04C48390); //nops
                }
                if (CurrentChar == CharIDs.Tails && process.ReadUInt32(0x00462490) == 0xFB9DEBE8)
                {
                    process.Write(0x00462490, 0x90909090); //nops
                    process.Write(0x00462494, 0x04C48390); //nops
                }
                if (CurrentChar == CharIDs.Knuckles && process.ReadUInt32(0x0047B4E8) == 0xFA0D93E8)
                {
                    process.Write(0x0047B4E8, 0x90909090); //nops
                    process.Write(0x0047B4EC, 0x08C48390); //nops
                }
                if (CurrentChar == CharIDs.Amy && process.ReadUInt32(0x0048B58C) == 0xF90CEFE8)
                {
                    process.Write(0x0048B58C, 0x90909090); //nops
                    process.Write(0x0048B590, 0x08C48390); //nops
                }
                if (CurrentChar == CharIDs.Gamma && process.ReadUInt32(0x004841B1) == 0xF980CAE8)
                {
                    process.Write(0x004841B1, 0x90909090); //nops
                    process.Write(0x004841B5, 0x08C48390); //nops
                }
                if (CurrentChar == CharIDs.Big && process.ReadUInt32(0x0049141E) == 0xF8AE5DE8)
                {
                    process.Write(0x0049141E, 0x90909090); //nops
                    process.Write(0x00491422, 0x08C48390); //nops
                }
            }
            if (!metroCheckBox25.Checked)
            {
                if (CurrentChar == CharIDs.Sonic && process.ReadUInt32(0x0049BF52) == 0x90909090)
                {
                    process.Write(0x0049BF52, 0xF80329E8); //un nops
                    process.Write(0x0049BF56, 0x04C483FF); //un nops
                }
                if (CurrentChar == CharIDs.Tails && process.ReadUInt32(0x00462490) == 0x90909090)
                {
                    process.Write(0x00462490, 0xFB9DEBE8); //un nops
                    process.Write(0x00462494, 0x04C483FF); //un nops
                }
                if (CurrentChar == CharIDs.Knuckles && process.ReadUInt32(0x0047B4E8) == 0x90909090)
                {
                    process.Write(0x0047B4E8, 0xFA0D93E8); //un nops
                    process.Write(0x0047B4EC, 0x08C483FF); //un nops
                }
                if (CurrentChar == CharIDs.Amy && process.ReadUInt32(0x0048B58C) == 0x90909090)
                {
                    process.Write(0x0048B58C, 0xF90CEFE8); //un nops
                    process.Write(0x0048B590, 0x08C483FF); //un nops
                }
                if (CurrentChar == CharIDs.Gamma && process.ReadUInt32(0x004841B1) == 0x90909090)
                {
                    process.Write(0x004841B1, 0xF980CAE8); //un nops
                    process.Write(0x004841B5, 0x08C483FF); //un nops
                }
                if (CurrentChar == CharIDs.Big && process.ReadUInt32(0x0049141E) == 0x90909090)
                {
                    process.Write(0x0049141E, 0xF8AE5DE8); //un nops
                    process.Write(0x00491422, 0x08C483FF); //un nops
                }
            }
            //player collision end
            int KillPlanesPrt = process.ReadInt32(0x0044AF32);
            if (metroCheckBox27.Checked && process.ReadInt32(KillPlanesPrt) == 0x000000FF) //Render Kill Planes
            {
                process.Write(KillPlanesPrt, 0x00000000);
            }
            else if (!metroCheckBox27.Checked && process.ReadInt32(KillPlanesPrt) == 0x00000000)
            {
                process.Write(KillPlanesPrt, 0x000000FF);
            }
            CurrentStatus = (StatusIDs)process.ReadByte(0x03B22DE4);
            CurrentChar = (CharIDs)process.ReadByte(0x03B2A2FD);
            metroLabel1.Text = "Charater: " + CharNames[CurrentChar];
            CurrentLevel = (LevelIDs)process.ReadByte(0x03B22DCC);
            CurrentCamera = (CameraIDs)process.ReadByte(0x03C49BBC);
            metroLabel14.Text = "Rings: " + Rings;
            metroLabel13.Text = "Act: " + process.ReadByte(0x03B22DEC);
            CurrentAct = process.ReadByte(0x03B22DEC);
            CurrentGameMode = (GameModeIDs)process.ReadByte(0x03ABDC7C);
            metroLabel2.Text = "Level: " + levelnames[CurrentLevel];
            metroLabel11.Text = "Lives: " + process.ReadByte(0x03B0EF34);
            metroLabel144.Text = "Current Camera: " + CameraNames[CurrentCamera];
            metroLabel133.Text = "Game Mode: " + CurrentGameMode.ToString();
            //pos stuff start
            int PosPtr = process.ReadInt32(0x03B42E10);//Current Pos Pointer

            int RotX = PosPtr + 0x14;
            int RotY = PosPtr + 0x18;
            int RotZ = PosPtr + 0x1C;
            int PosX = PosPtr + 0x20;//Current Pos X
            int PosY = PosPtr + 0x24;//Current Pos Y
            int PosZ = PosPtr + 0x28;//Current Pos Z
            int CharTaskPtr = process.ReadInt32(0x03B3CDF0);//Current Phyisics Pointer
            if (CharTaskPtr != 0)
            {
                int SpindashSpeed = CharTaskPtr;
                int HoverFrames = CharTaskPtr + 0x08;
                int IdleFrames = CharTaskPtr + 0x0E;
                int HoriSpeed = CharTaskPtr + 0x38;
                int VertSpeed = CharTaskPtr + 0x3C;
                int ZSpeed = CharTaskPtr + 0x40;
                int ModeChangeTime = CharTaskPtr + 0x80;
                int CollSize = CharTaskPtr + 0x110;
                int YOffset = CharTaskPtr + 0x11C;
                metroLabel142.Text = "Hover Frames: " + process.ReadInt32(HoverFrames).ToString();
                metroLabel143.Text = "Idle Frames: " + process.ReadInt16(IdleFrames).ToString();
                metroLabel135.Text = "X: " + process.ReadSingle(HoriSpeed);
                metroLabel134.Text = "Y: " + process.ReadSingle(VertSpeed);
                metroLabel132.Text = "Z: " + process.ReadSingle(ZSpeed);
                metroLabel146.Text = "Spindash Speed: " + process.ReadSingle(SpindashSpeed);
                metroLabel147.Text = "Collision Size: " + process.ReadSingle(CollSize).ToString();
                metroLabel148.Text = "Y Offset: " + process.ReadSingle(YOffset);
                metroLabel149.Text = "Mode Change Timer: " + process.ReadInt16(ModeChangeTime);
                if (PosPtr != 0x0000000)
                {
                    metroLabel16.Text = "X: " + process.ReadSingle(PosX).ToString();
                    metroLabel17.Text = "Y: " + process.ReadSingle(PosY).ToString();
                    metroLabel18.Text = "Z: " + process.ReadSingle(PosZ).ToString();
                    metroLabel140.Text = "X: " + process.ReadInt16(RotX).ToString();
                    metroLabel139.Text = "Y: " + process.ReadInt16(RotY).ToString();
                    metroLabel138.Text = "Z: " + process.ReadInt16(RotZ).ToString();
                }
                //Position Save Load Start
                if (metroCheckBox24.Checked)//save load checked
                {
                    if (process.ReadByte(0x03B0E81C) == 0x81)//save pos
                    {
                        SavedPosX = process.ReadSingle(PosX);
                        SavedPosY = process.ReadSingle(PosY);
                        SavedPosZ = process.ReadSingle(PosZ);
                    }
                    if (process.ReadByte(0x03B0E81C) == 0x41)//set pos
                    {
                        process.Write(PosX, SavedPosX);
                        process.Write(PosY, SavedPosY);
                        process.Write(PosZ, SavedPosZ);
                    }
                }
                //Position Save Load End
                //Tasks & Workers Tab Start
                if (TaskWkCurrent != 0)
                {
                    metroLabel98.Text = "Current Task: " + TaskWkCurrent.ToString("X2");
                    metroLabel20.Text = "Next Task: " + process.ReadInt32(TaskWkCurrent).ToString("X2");
                    int TaskWkPrev = process.ReadInt32(TaskWkCurrent + 0x04);
                    metroLabel21.Text = "Prev Task: " + TaskWkPrev.ToString("X2");
                    int TaskWkParent = process.ReadInt32(TaskWkCurrent + 0x08);
                    metroLabel22.Text = "Parent Task: " + TaskWkParent.ToString("X2");
                    int TaskWkChild = process.ReadInt32(TaskWkCurrent + 0x0C);
                    metroLabel23.Text = "Child Task: " + TaskWkChild.ToString("X2");
                    int TaskWkMain = process.ReadInt32(TaskWkCurrent + 0x10);
                    metroLabel27.Text = "Main Function: " + TaskWkMain.ToString("X2");
                    int TaskWkDisplay = process.ReadInt32(TaskWkCurrent + 0x14);
                    metroLabel26.Text = "Display Function: " + TaskWkDisplay.ToString("X2");
                    int TaskWkDel = process.ReadInt32(TaskWkCurrent + 0x18);
                    metroLabel25.Text = "Destroy Function: " + TaskWkDel.ToString("X2");
                    int TaskWkObjCon = process.ReadInt32(TaskWkCurrent + 0x1C);
                    metroLabel24.Text = "Object Condition: " + TaskWkObjCon.ToString("X2");
                    int TaskWkTaskWk = process.ReadInt32(TaskWkCurrent + 0x20);
                    metroLabel57.Text = "Task Worker: " + TaskWkTaskWk.ToString("X2");
                    int TaskWkMotionWk = process.ReadInt32(TaskWkCurrent + 0x24);
                    metroLabel56.Text = "Motion Worker: " + TaskWkMotionWk.ToString("X2");
                    int TaskWkForceWk = process.ReadInt32(TaskWkCurrent + 0x28);
                    metroLabel55.Text = "Force Worker: " + TaskWkForceWk.ToString("X2");
                    int TaskWkAnyWk = process.ReadInt32(TaskWkCurrent + 0x2C);
                    metroLabel49.Text = "Any Worker: " + TaskWkAnyWk.ToString("X2");
                    int TaskWKVoidWK = process.ReadInt32(TaskWkCurrent + 0x30);
                    metroLabel35.Text = "Void Worker: " + TaskWKVoidWK.ToString("X2");
                    if (TaskWkTaskWk != 0)
                    {
                        int TaskWkTaskWkPtr = TaskWkTaskWk;
                        metroLabel58.Text = "Task Worker: " + process.ReadInt32(TaskWkCurrent + 0x20).ToString("X2");
                        metroLabel30.Text = "Mode: " + process.ReadByte(TaskWkTaskWkPtr);
                        metroLabel29.Text = "Signed Mode: " + process.ReadByte(TaskWkTaskWkPtr + 0x01).ToString("X2");
                        metroLabel28.Text = "ID: " + process.ReadByte(TaskWkTaskWkPtr + 0x02).ToString("X2");
                        metroLabel61.Text = "Byte Timer:" + process.ReadByte(TaskWkTaskWkPtr + 0x03).ToString("X2");
                        int TaskWkStatusFlag = (int)TaskWkTaskWkPtr + 0x4;
                        metroLabel60.Text = "Status Flags: " + process.ReadInt32(TaskWkStatusFlag).ToString("X2");
                        int TaskWkWTimer = (int)TaskWkTaskWkPtr + 0x6;
                        metroLabel100.Text = "2Byte Timer: " + process.ReadUInt16(TaskWkWTimer).ToString("X2");
                        int TaskWkCounter = (int)TaskWkTaskWkPtr + 0x8;
                        metroLabel59.Text = "TaskWk Union:" + process.ReadInt32(TaskWkCounter).ToString("X2");
                        int TaskWkTimer = (int)TaskWkTaskWkPtr + 0xC;
                        metroLabel64.Text = "Taskwk Signed Timer: " + process.ReadInt32(TaskWkTimer).ToString("X2");
                        int TaskWkTimerV = (int)TaskWkTaskWkPtr + 0x10;
                        metroLabel63.Text = "Taskwk Timer Value: " + process.ReadInt32(TaskWkTimerV).ToString("X2");
                        int TaskWkAngleX = (int)TaskWkTaskWkPtr + 0x14;
                        metroLabel106.Text = "X: " + process.ReadSingle(TaskWkAngleX).ToString();
                        int TaskWkAngleY = (int)TaskWkTaskWkPtr + 0x18;
                        metroLabel105.Text = "Y: " + process.ReadSingle(TaskWkAngleY).ToString();
                        int TaskWkAngleZ = (int)TaskWkTaskWkPtr + 0x1C;
                        metroLabel104.Text = "Z: " + process.ReadSingle(TaskWkAngleZ).ToString();
                        int TaskWkPosX = (int)TaskWkTaskWkPtr + 0x20;
                        metroLabel103.Text = "X: " + process.ReadSingle(TaskWkPosX).ToString();
                        int TaskWkPosY = (int)TaskWkTaskWkPtr + 0x24;
                        metroLabel102.Text = "Y: " + process.ReadSingle(TaskWkPosY).ToString();
                        int TaskWkPosZ = (int)TaskWkTaskWkPtr + 0x28;
                        metroLabel101.Text = "Z: " + process.ReadSingle(TaskWkPosZ).ToString();
                        int TaskWkScaleX = (int)TaskWkTaskWkPtr + 0x2C;
                        metroLabel109.Text = "X: " + process.ReadSingle(TaskWkScaleX).ToString();
                        int TaskWkScaleY = (int)TaskWkTaskWkPtr + 0x30;
                        metroLabel108.Text = "Y: " + process.ReadSingle(TaskWkScaleY).ToString();
                        int TaskWkScaleZ = (int)TaskWkTaskWkPtr + 0x34;
                        metroLabel107.Text = "Z: " + process.ReadSingle(TaskWkScaleZ).ToString();
                        int TaskWkColliWkPtr = (int)TaskWkTaskWkPtr + 0x38;
                        metroLabel67.Text = "Collision Work Pointer: " + process.ReadInt32(TaskWkColliWkPtr).ToString("X2");
                        int TaskWkEventWkPtr = (int)TaskWkTaskWkPtr + 0x3C;
                        metroLabel68.Text = "Event Work Pointer: " + process.ReadInt32(TaskWkEventWkPtr).ToString("X2");
                        //int MotionWkPtr = process.ReadInt32((int)TaskWkCurrent + 0x24);
                        if (process.ReadInt32(TaskWkColliWkPtr) != 0x0)
                        {
                            int CollisionWk = process.ReadInt32(TaskWkColliWkPtr);
                            metroLabel154.Text = "ID: " + process.ReadInt16(CollisionWk);
                            metroLabel155.Text = "nbHit: " + process.ReadInt16(CollisionWk + 0x02);
                            metroLabel156.Text = "Flag: " + process.ReadInt16(CollisionWk + 0x04).ToString("X2");
                            metroLabel157.Text = "nbInfo: " + process.ReadInt16(CollisionWk + 0x06);
                            metroLabel158.Text = "Collision Range: " + process.ReadSingle(CollisionWk + 0x08).ToString();
                            metroLabel159.Text = "Info: " + process.ReadInt32(CollisionWk + 0x0C).ToString("X2");
                            metroLabel160.Text = "Normal X: " + process.ReadSingle(CollisionWk + 0x90).ToString();
                            metroLabel161.Text = "Normal Y: " + process.ReadSingle(CollisionWk + 0x94).ToString();
                            metroLabel162.Text = "Normal Z: " + process.ReadSingle(CollisionWk + 0x98).ToString();
                            metroLabel163.Text = "My Task: " + process.ReadInt32(CollisionWk + 0x9C).ToString("X2");
                            metroLabel164.Text = "My Num: " + process.ReadInt16(CollisionWk + 0xA0);
                            metroLabel165.Text = "Hit Num: " + process.ReadInt16(CollisionWk + 0xA2);
                            metroLabel166.Text = "Hit Cwp: " + process.ReadInt32(CollisionWk + 0xA4).ToString("X2");
                        }
                        else
                        {
                            metroLabel154.Text = "ID: NaN";
                            metroLabel155.Text = "nbHit: NaN";
                            metroLabel156.Text = "Flag: NaN";
                            metroLabel157.Text = "nbInfo: NaN";
                            metroLabel158.Text = "Collision Range: NaN";
                            metroLabel159.Text = "Info: NaN";
                            metroLabel160.Text = "Normal X: NaN";
                            metroLabel161.Text = "Normal Y: NaN";
                            metroLabel162.Text = "Normal Z: NaN";
                            metroLabel163.Text = "My Task: NaN";
                            metroLabel164.Text = "My Num: NaN";
                            metroLabel165.Text = "Hit Num: NaN";
                            metroLabel166.Text = "Hit Cwp: NaN";
                        }
                    }
                    else
                    {
                        metroLabel58.Text = "Task Worker: NaN";
                        metroLabel30.Text = "Mode: NaN";
                        metroLabel29.Text = "Signed Mode: NaN";
                        metroLabel28.Text = "ID: NaN";
                        metroLabel61.Text = "Byte Timer: NaN";
                        metroLabel60.Text = "Status Flags: NaN";
                        metroLabel100.Text = "2Byte Timer: NaN";
                        metroLabel59.Text = "TaskWk Union: NaN";
                        metroLabel64.Text = "Taskwk Signed Timer: NaN";
                        metroLabel63.Text = "Taskwk Timer Value: NaN";
                        metroLabel106.Text = "X: NaN";
                        metroLabel105.Text = "Y: NaN";
                        metroLabel104.Text = "Z: NaN";
                        metroLabel103.Text = "X: NaN";
                        metroLabel102.Text = "Y: NaN";
                        metroLabel101.Text = "Z: NaN";
                        metroLabel109.Text = "X: NaN";
                        metroLabel108.Text = "Y: NaN";
                        metroLabel107.Text = "Z: NaN";
                        metroLabel67.Text = "Collision Work Pointer: 0";
                        metroLabel68.Text = "Event Work Pointer: 0";
                    }
                    int MotionWkPtr = process.ReadInt32((int)TaskWkCurrent + 0x24);
                    if (MotionWkPtr != 0)
                    {
                        int MotionWkWk = MotionWkPtr;
                        metroLabel110.Text = "Motion Worker: " + MotionWkWk.ToString("X2");
                        metroLabel111.Text = "Work: " + process.ReadInt32(MotionWkWk).ToString("X2");
                        int MotionWkGravX = MotionWkPtr + 0x04;
                        metroLabel115.Text = "X: " + process.ReadSingle(MotionWkGravX).ToString("");
                        int MotionWkGravY = MotionWkPtr + 0x08;
                        metroLabel114.Text = "Y: " + process.ReadSingle(MotionWkGravY).ToString("");
                        int MotionWkGravZ = MotionWkPtr + 0x0C;
                        metroLabel113.Text = "Z: " + process.ReadSingle(MotionWkGravZ).ToString("");
                        int MotionWkAccX = MotionWkPtr + 0x10;
                        metroLabel119.Text = "X: " + process.ReadSingle(MotionWkAccX).ToString("");
                        int MotionWkAccY = MotionWkPtr + 0x14;
                        metroLabel118.Text = "Y: " + process.ReadSingle(MotionWkAccY).ToString("");
                        int MotionWkAccZ = MotionWkPtr + 0x18;
                        metroLabel117.Text = "Z: " + process.ReadSingle(MotionWkAccZ).ToString("");
                        int MotionWkAngAimX = MotionWkPtr + 0x1C;
                        metroLabel123.Text = "X: " + process.ReadSingle(MotionWkAngAimX).ToString("");
                        int MotionWkAngAimY = MotionWkPtr + 0x20;
                        metroLabel122.Text = "Y: " + process.ReadSingle(MotionWkAngAimY).ToString("");
                        int MotionWkAngAimZ = MotionWkPtr + 0x24;
                        metroLabel121.Text = "Z: " + process.ReadSingle(MotionWkAngAimZ).ToString("");
                        int MotionWkAngSpdX = MotionWkPtr + 0x28;
                        metroLabel127.Text = "X: " + process.ReadSingle(MotionWkAngSpdX).ToString("");
                        int MotionWkAngSpdY = MotionWkPtr + 0x2C;
                        metroLabel126.Text = "Y: " + process.ReadSingle(MotionWkAngSpdY).ToString("");
                        int MotionWkAngSpdZ = MotionWkPtr + 0x30;
                        metroLabel125.Text = "Z: " + process.ReadSingle(MotionWkAngSpdZ).ToString("");
                        int MotionWkRad = MotionWkPtr + 0x34;
                        metroLabel128.Text = "Rad: " + process.ReadInt32(MotionWkRad).ToString("X2");
                        int MotionWkHeight = MotionWkPtr + 0x38;
                        metroLabel129.Text = "Height: " + process.ReadInt32(MotionWkHeight).ToString("X2");
                        int MotionWkWeight = MotionWkPtr + 0x3C;
                        metroLabel130.Text = "Weight: " + process.ReadInt32(MotionWkWeight).ToString("X2");
                    }
                    else
                    {
                        metroLabel110.Text = "Motion Worker: NaN";
                        metroLabel111.Text = "Work: NaN";
                        metroLabel115.Text = "X: NaN";
                        metroLabel114.Text = "Y: NaN";
                        metroLabel113.Text = "Z: NaN";
                        metroLabel119.Text = "X: NaN";
                        metroLabel118.Text = "Y: NaN";
                        metroLabel117.Text = "Z: NaN";
                        metroLabel123.Text = "X: NaN";
                        metroLabel122.Text = "Y: NaN";
                        metroLabel121.Text = "Z: NaN";
                        metroLabel127.Text = "X: NaN";
                        metroLabel126.Text = "Y: NaN";
                        metroLabel125.Text = "Z: NaN";
                        metroLabel128.Text = "Rad: NaN";
                        metroLabel129.Text = "Height: NaN";
                        metroLabel130.Text = "Weight: NaN";
                    }
                }
                //Tasks & Workers Tab End
                if (metroCheckBox36.Checked)
                {
                    if (TaskWkCurrent != 0x0)
                    {
                        int SelectedTaskTaskWk = process.ReadInt32(TaskWkCurrent + 0x20);
                        if (SelectedTaskTaskWk != 0x0)
                        {
                            int SelectedTaskWkPosX = SelectedTaskTaskWk + 0x20;
                            int SelectedTaskWkPosY = SelectedTaskTaskWk + 0x24;
                            int SelectedTaskWkPosZ = SelectedTaskTaskWk + 0x28;
                            if ((process.ReadByte(0x03B0E81C) & 0x20) != 0 && SelectedTaskTaskWk != 0)
                            {
                                process.Write(SelectedTaskWkPosX, process.ReadSingle(PosX));
                                process.Write(SelectedTaskWkPosY, process.ReadSingle(PosY));
                                process.Write(SelectedTaskWkPosZ, process.ReadSingle(PosZ));
                            }
                        }
                    }
                }
                //SRM Code Area
                int IntPrt = process.ReadInt32(0x03B3CDF0);
                if (IntPrt != 0)
                {
                    int HeldObjPtr = IntPrt + 0x68;//gets held object address from pointer
                    metroTextBox2.Text = "0x" + HeldObjPtr.ToString("X2"); //writes current held object.
                    uint NextObjPter = process.ReadUInt32(HeldObjPtr);
                    if (NextObjPter != 0)
                    {
                        if (NextObjPter != 0xffffffff)
                        {
                            metroLabel40.Text = "Next Object: " + process.ReadInt32(NextObjPter).ToString("X2");//gets next object pointer
                            uint LastObjPrt = NextObjPter + 0x04;
                            metroLabel41.Text = "Previous Object: " + process.ReadInt32(LastObjPrt).ToString("X2");//gets prev object ptr
                            uint ParentObjPtr = NextObjPter + 0x08;
                            metroLabel42.Text = "Parent Object: " + process.ReadInt32(ParentObjPtr).ToString("X2");//gets parents object prt
                            uint ChildObjPtr = NextObjPter + 0x0C;
                            metroLabel43.Text = "Child Object: " + process.ReadInt32(ChildObjPtr).ToString("X2");//child object pointer
                            uint MainObjSubPtr = NextObjPter + 0x10;
                            metroLabel38.Text = "Main Subroutine: " + process.ReadInt32(MainObjSubPtr).ToString("X2");//main sub pointer
                            uint DisplaySubPtr = NextObjPter + 0x14;
                            metroLabel37.Text = "Display Subroutine: " + process.ReadInt32(DisplaySubPtr).ToString("X2");//display sub pointer
                            uint DestroySubPtr = NextObjPter + 0x18;
                            metroLabel36.Text = "Deletion Subroutine: " + process.ReadInt32(DestroySubPtr).ToString("X2");//delete sub pointer
                            uint ObjCondition = NextObjPter + 0x1C;
                            metroLabel44.Text = "Object Condition: " + process.ReadInt32(ObjCondition).ToString("X2");// object condition pointer
                            uint TaskWkPtr = NextObjPter + 0x20;
                            metroLabel34.Text = "TaskWk: " + process.ReadInt32(TaskWkPtr).ToString("X2");//taskwk pointer
                            uint MotionWkPtr = NextObjPter + 0x24;
                            metroLabel39.Text = "MotionWk Pointer: " + process.ReadInt32(MotionWkPtr).ToString("X2");//motionwk pointer
                            uint ForceWkPtr = NextObjPter + 0x28;
                            metroLabel45.Text = "ForceWK Pointer: " + process.ReadInt32(ForceWkPtr).ToString("X2");//FroceWk Pointer
                            uint AnyWk = NextObjPter + 0x2C;
                            metroLabel46.Text = "AnyWk Pointer: " + process.ReadInt32(AnyWk).ToString("X2");//AnyWk Pointer
                            uint VoidWk = NextObjPter + 0x30;
                            metroLabel47.Text = "VoidWk Pointer: " + process.ReadInt32(VoidWk).ToString("X2");//Void Pointer
                            if (metroCheckBox26.Checked)//Record
                            {
                                string result = process.ReadInt32(MainObjSubPtr).ToString("X2");
                                if (textBox1.Text.IndexOf(result) == -1)
                                    textBox1.Text += "\r\n" + result;
                            }
                            if (process.ReadInt32(TaskWkPtr) != 0)
                            {
                                int HeldObjPosX = process.ReadInt32(TaskWkPtr) + 0x20;//gets held object X pos
                                metroLabel31.Text = "Object X: " + process.ReadSingle(HeldObjPosX).ToString();
                                int HeldObjPosY = process.ReadInt32(TaskWkPtr) + 0x24;//gets held object Y pos
                                metroLabel32.Text = "Object Y: " + process.ReadSingle(HeldObjPosY).ToString();
                                int HeldObjPosZ = process.ReadInt32(TaskWkPtr) + 0x28;//gets held object Z pos
                                metroLabel33.Text = "Object Z: " + process.ReadSingle(HeldObjPosZ).ToString();
                                metroLabel79.Text = "Task Worker: " + process.ReadInt32(TaskWkPtr).ToString("X2");
                                if (metroCheckBox35.Checked)//Teleport Task To You 
                                {
                                    if ((process.ReadByte(0x03B0E81C) & 0x20) != 0 && process.ReadInt32(TaskWkPtr) != 0)
                                    {
                                        process.Write(HeldObjPosX, process.ReadSingle(PosX));
                                        process.Write(HeldObjPosY, process.ReadSingle(PosY));
                                        HeldObjPosZ = process.ReadInt32(TaskWkPtr) + 0x28;
                                        process.Write(HeldObjPosZ, process.ReadSingle(PosZ));
                                    }
                                }
                                uint TaskWkPtrValue = process.ReadUInt32(TaskWkPtr);
                                if (TaskWkPtrValue != 0)
                                {
                                    metroLabel82.Text = "Mode: " + process.ReadByte(TaskWkPtrValue).ToString("X2");
                                    metroLabel81.Text = "Signed Mode: " + process.ReadByte(TaskWkPtrValue + 0x01).ToString("X2");
                                    metroLabel80.Text = "ID: " + process.ReadByte(TaskWkPtrValue + 0x02).ToString("X2");
                                    metroLabel78.Text = "Byte Timer:" + process.ReadByte(TaskWkPtrValue + 0x03).ToString("X2");
                                    int TaskWkStatusFlag = (int)TaskWkPtrValue + 0x4;
                                    metroLabel77.Text = "Status Flags: " + process.ReadInt32(TaskWkStatusFlag).ToString("X2");
                                    int TaskWkWTimer = (int)TaskWkPtrValue + 0x6;
                                    metroLabel84.Text = "2Byte Timer: " + process.ReadUInt16(TaskWkWTimer).ToString("X2");
                                    int TaskWkCounter = (int)TaskWkPtrValue + 0x8;
                                    metroLabel76.Text = "TaskWk Union:" + process.ReadInt32(TaskWkCounter).ToString("X2");
                                    int TaskWkTimer = (int)TaskWkPtrValue + 0xC;
                                    metroLabel75.Text = "Taskwk Signed Timer: " + process.ReadInt32(TaskWkTimer).ToString("X2");
                                    int TaskWkTimerV = (int)TaskWkPtrValue + 0x10;
                                    metroLabel74.Text = "Taskwk Timer Value: " + process.ReadInt32(TaskWkTimerV).ToString("X2");
                                    int TaskWkAngleX = (int)TaskWkPtrValue + 0x14;
                                    metroLabel94.Text = "X: " + process.ReadSingle(TaskWkAngleX).ToString();
                                    int TaskWkAngleY = (int)TaskWkPtrValue + 0x18;
                                    metroLabel93.Text = "Y:  " + process.ReadSingle(TaskWkAngleY).ToString();
                                    int TaskWkAngleZ = (int)TaskWkPtrValue + 0x1C;
                                    metroLabel92.Text = "Z: " + process.ReadSingle(TaskWkAngleZ).ToString();
                                    int TaskWkPosX = (int)TaskWkPtrValue + 0x20;
                                    metroLabel72.Text = "X: " + process.ReadSingle(TaskWkPosX).ToString();
                                    int TaskWkPosY = (int)TaskWkPtrValue + 0x24;
                                    metroLabel85.Text = "Y: " + process.ReadSingle(TaskWkPosY).ToString();
                                    int TaskWkPosZ = (int)TaskWkPtrValue + 0x28;
                                    metroLabel86.Text = "Z: " + process.ReadSingle(TaskWkPosZ).ToString();
                                    int TaskWkScaleX = (int)TaskWkPtrValue + 0x2C;
                                    metroLabel97.Text = "X: " + process.ReadSingle(TaskWkScaleX).ToString();
                                    int TaskWkScaleY = (int)TaskWkPtrValue + 0x30;
                                    metroLabel96.Text = "Y: " + process.ReadSingle(TaskWkScaleY).ToString();
                                    int TaskWkScaleZ = (int)TaskWkPtrValue + 0x34;
                                    metroLabel95.Text = "Z: " + process.ReadSingle(TaskWkScaleZ).ToString();
                                    int TaskWkColliWkPtr = (int)TaskWkPtrValue + 0x38;
                                    metroLabel70.Text = "Collision Work Pointer: " + process.ReadInt32(TaskWkColliWkPtr).ToString("X2");
                                    int TaskWkEventWkPtr = (int)TaskWkPtrValue + 0x3C;
                                    metroLabel69.Text = "Event Work Pointer: " + process.ReadInt32(TaskWkEventWkPtr).ToString("X2");
                                }
                            }
                        }
                    }
                    else
                    {
                        metroLabel34.Text = "TaskWk: 0";
                        metroLabel36.Text = "Deletion Subroutine: 0";
                        metroLabel37.Text = "Display Subroutine: 0";
                        metroLabel38.Text = "Main Subroutine: 0";
                        metroLabel39.Text = "MotionWk Pointer: 0 ";
                        metroLabel40.Text = "Next Object: 0";
                        metroLabel41.Text = "Previous Object: 0";
                        metroLabel42.Text = "Parent Object: 0";
                        metroLabel43.Text = "Child Object: 0";
                        metroLabel44.Text = "Object Condition: 0";
                        metroLabel45.Text = "ForceWK Pointer: 0";
                        metroLabel46.Text = "AnyWk Pointer: 0";
                        metroLabel47.Text = "VoidWk Pointer: 0";
                        metroLabel31.Text = "Object X: NaN";
                        metroLabel32.Text = "Object Y: NaN";
                        metroLabel33.Text = "Object Z: NaN";
                        metroLabel48.Text = "Object Pointer: NaN";
                        metroLabel82.Text = "Mode: NaN";
                        metroLabel81.Text = "Signed Mode: NaN";
                        metroLabel80.Text = "ID: NaN";
                        metroLabel78.Text = "Byte Timer: NaN";
                        metroLabel77.Text = "Status Flags: NaN";
                        metroLabel84.Text = "2Byte Timer: NaN";
                        metroLabel76.Text = "TaskWk Union: NaN";
                        metroLabel75.Text = "Taskwk Signed Timer: NaN";
                        metroLabel74.Text = "Taskwk Timer Value: NaN";
                        metroLabel94.Text = "X: NaN";
                        metroLabel93.Text = "Y: NaN";
                        metroLabel92.Text = "Z: NaN";
                        metroLabel72.Text = "X: NaN";
                        metroLabel85.Text = "Y: NaN";
                        metroLabel86.Text = "Z: NaN";
                        metroLabel97.Text = "X: NaN";
                        metroLabel96.Text = "Y: NaN";
                        metroLabel95.Text = "Z: NaN";
                        metroLabel70.Text = "Collision Work Pointer: NaN";
                        metroLabel69.Text = "Event Work Pointer: NaN";
                    }
                }
            }
        }
        public enum CameraIDs : byte
        {
            Auto = 0x00,
            Free = 0x01
        }
        static readonly Dictionary<CameraIDs, string> CameraNames = new Dictionary<CameraIDs, string>()
        {
            { CameraIDs.Auto, "Auto" },
            { CameraIDs.Free, "Free" }
        };
        public enum CharIDs : byte
        {
            Sonic = 0x00,
            Tails = 0x01,
            Knuckles = 0x02,
            Amy = 0x03,
            Big = 0x04,
            Gamma = 0x05,
            Super_Sonic = 0x06
        }
        public enum ClipLevels : byte
        {
            Far = 0x00,
            Normal = 0x01,
            Near = 0x02
        }
        static readonly Dictionary<CharIDs, string> CharNames = new Dictionary<CharIDs, string>()
        {
            { CharIDs.Sonic, "Sonic" },
            { CharIDs.Tails, "Tails" },
            { CharIDs.Knuckles, "Knuckles" },
            { CharIDs.Amy, "Amy" },
            { CharIDs.Big, "Big" },
            { CharIDs.Gamma, "Gamma" },
            { CharIDs.Super_Sonic, "Super Sonic"}
         };
        public enum GameModeIDs : byte //0x03ABDC7C lol
        {
            ActionStage = 0x04,
            AdventureField = 0x05,
            IntoMovie = 0x08,
            TrialMode = 0x09,
            MissionMode = 0x0A,
            TitleScreen = 0x0C,
            StoryIntroScreen = 0x14,
            StartCredits = 0x15,
            Credits = 0x16
        };
        public enum StatusIDs : byte
        {
            isFadein = 0x04,
            isLoading = 0x09,
            inGame = 0x0F,
            isPaused = 0x10,
            isMainMenu = 0x15
        };
        public enum LevelIDs : byte
        {
            Hedgehog_Hammer = 0x00,
            Emerald_Coast = 0x1,
            Windy_Valley = 0x2,
            Twinkle_Park = 0x3,
            Speed_Highway = 0x4,
            Red_Mountain = 0x5,
            Sky_Deck = 0x6,
            Lost_World = 0x7,
            Ice_Cap = 0x8,
            Casinopolis = 0x9,
            Final_Egg = 0xA,
            Hot_Shelter = 0xC,
            Chaos_0 = 0xF,
            Chaos_2 = 0x10,
            Chaos_4 = 0x11,
            Chaos_6 = 0x12,
            Perfect_Chaos = 0x13,
            Egg_Hornet = 0x14,
            Egg_Walker = 0x15,
            Egg_Viper = 0x16,
            Zero = 0x17,
            E101 = 0x18,
            E101R = 0x19,
            Station_Square = 0x1A,
            Egg_Carrier_Outside = 0x1D,
            Egg_Carrier_Inside = 0x20,
            Mystic_Ruins = 0x21,
            Past = 0x22,
            Twinkle_Circuit = 0x23,
            Sky_Chase_1 = 0x24,
            Sky_Chase_2 = 0x25,
            Sand_Hill = 0x26,
            SS_Garden = 0x27,
            EC_Garden = 0x28,
            MR_Garden = 0x29,
            Chao_Race = 0x2A
        }
        static readonly Dictionary<LevelIDs, string> levelnames = new Dictionary<LevelIDs, string>()
        {
            { LevelIDs.Hedgehog_Hammer, "Hedgehog Hammer" },
            { LevelIDs.Emerald_Coast, "Emerald Coast" },
            { LevelIDs.Windy_Valley, "Windy Valley" },
            { LevelIDs.Twinkle_Park, "Twinkle Park" },
            { LevelIDs.Speed_Highway, "Speed Highway" },
            { LevelIDs.Red_Mountain, "Red Mountain" },
            { LevelIDs.Sky_Deck, "Sky Deck" },
            { LevelIDs.Lost_World, "Lost World" },
            { LevelIDs.Ice_Cap, "Ice Cap" },
            { LevelIDs.Casinopolis, "Casinopolis" },
            { LevelIDs.Final_Egg, "Final Egg" },
            { LevelIDs.Hot_Shelter, "Hot Shelter" },
            { LevelIDs.Chaos_0, "Chaos 0" },
            { LevelIDs.Chaos_2, "Chaos 2" },
            { LevelIDs.Chaos_4, "Chaos 4" },
            { LevelIDs.Chaos_6, "Chaos 6" },
            { LevelIDs.Perfect_Chaos, "Perfect Chaos" },
            { LevelIDs.Egg_Hornet, "Egg Hornet" },
            { LevelIDs.Egg_Walker, "Egg Walker" },
            { LevelIDs.Egg_Viper, "Egg Viper" },
            { LevelIDs.Zero, "Zero" },
            { LevelIDs.E101, "E-101 Beta" },
            { LevelIDs.E101R, "E-101mkII" },
            { LevelIDs.Station_Square, "Station Square" },
            { LevelIDs.Egg_Carrier_Outside, "Egg Carrier Outside" },
            { LevelIDs.Egg_Carrier_Inside, "Egg Carrier Inside" },
            { LevelIDs.Mystic_Ruins, "Mystic Ruins" },
            { LevelIDs.Past, "The Past" },
            { LevelIDs.Twinkle_Circuit, "Twinkle Circuit" },
            { LevelIDs.Sky_Chase_1, "Sky Chase Act 1" },
            { LevelIDs.Sky_Chase_2, "Sky Chase Act 2" },
            { LevelIDs.Sand_Hill, "Sand Hill" },
            { LevelIDs.SS_Garden, "Station Square Chao Garden" },
            { LevelIDs.EC_Garden, "Egg Carrier Chao Garden" },
            { LevelIDs.MR_Garden, "Mystic Ruins Chao Garden" },
            { LevelIDs.Chao_Race, "Chao Race" }
        };
        private void MetroButton1_Click(object sender, EventArgs e)
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            process.Write(0x03B0EF34, 0x63);
        }
        private void MetroButton2_Click(object sender, EventArgs e)//hurt
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int ptr = process.ReadInt32(0x03B42E10);
            int offset = ptr + 0x04;
            process.Write(offset, 0x05);//sets you to taking damage
        }
        private void MetroButton3_Click(object sender, EventArgs e)//time set to 99 good for gamma 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            process.Write(0x03B0EF48, 0x00000063);
            process.Write(0x03B0F128, 0x00000063);
            process.Write(0x03B0EF35, 0x0000003B);
        }
        private void MetroButton4_Click(object sender, EventArgs e)//Set Pos
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int PosPtr = process.ReadInt32(0x03B42E10);//Pos Pointer
            int PosX = PosPtr + 0x20;//Pos X
            int PosY = PosPtr + 0x24;//Pos Y
            int PosZ = PosPtr + 0x28;//Pos Z
            if (String.IsNullOrEmpty(metroTextBox3.Text) || (String.IsNullOrEmpty(metroTextBox4.Text) || String.IsNullOrEmpty(metroTextBox5.Text)))
            {
                MessageBox.Show("Please Insert Position into the Three Textbox's", "Error");
            }
            else
            {
                process.Write(PosX, Convert.ToSingle(metroTextBox3.Text));//sets pos to the float values in textbox
                process.Write(PosY, Convert.ToSingle(metroTextBox4.Text));//sets pos to the float values in textbox
                process.Write(PosZ, Convert.ToSingle(metroTextBox5.Text));//sets pos to the float values in textbox
            }
        }
        private void ComboBox1_SelectedIndexChanged(object sender, EventArgs e)//gravity
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (comboBox1.SelectedIndex == 0) //very low
            {
                process.Write(0x00915560, 0x3CA3D70A);
            }
            if (comboBox1.SelectedIndex == 1) //low
            {
                process.Write(0x00915560, 0x3D23D70A);
            }
            if (comboBox1.SelectedIndex == 2) //normal
            {
                process.Write(0x00915560, 0x3DA3D70A);
            }
            if (comboBox1.SelectedIndex == 3) //high
            {
                process.Write(0x00915560, 0x3E23D70A);
            }
        }
        private void MetroCheckBox9_CheckedChanged(object sender, EventArgs e)//locks object
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int ptr = process.ReadInt32(0x03B3CDF0);
            int offset = ptr + 0x68;
            int value = process.ReadInt32(offset);
            LockedObj = value;
        }
        private void MetroCheckBox11_CheckedChanged(object sender, EventArgs e)//walk on water
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox11.Checked)
            {
                process.Write(0x004496E1, 0x90909090);//nops sonic.exe+496E1 jne
                process.Write(0x004496E5, 0x468B9090);
            }
            else
            {
                process.Write(0x004496E1, 0x00CF850F);//restores sonic.exe+496E1 jne
                process.Write(0x004496E5, 0x468B0000);
            }
        }
        private void MetroCheckBox12_CheckedChanged(object sender, EventArgs e)//inf tails flight
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox12.Checked)
            {
                process.Write(0x0045D86B, 0x90909090);//nops sonic.exe+5D86B fst dword ptr
                process.Write(0x0045D86F, 0x1DD89090);
            }
            else
            {
                process.Write(0x0045D86B, 0x009897D9);//restores sonic.exe+5D86B fst dword ptr
                process.Write(0x0045D86F, 0x1DD80000);
            }
        }
        private void MetroCheckBox13_CheckedChanged(object sender, EventArgs e)//unimited underwater time
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox13.Checked)
            {
                process.Write(0x00446FBB, 0x90909090);//nops sonic.exe+46FBB inc word ptr
            }
            else
            {
                process.Write(0x00446FBB, 0x0C46FF66);//restores sonic.exe+46FBB inc word ptr
            }
        }
        private void MetroLabel50_Click(object sender, EventArgs e)//Credits
        {
            MessageBox.Show("Credits to \r\nDnawrkshp for all of the help with the program back in 2015 and even now in 2021.\r\nBadger41 for all the help debugging my dumb bugs.\r\nMainMemory and the entire SA1-Modding Community On X-Hax.\r\nThe SADX Speedrunning Community.\r\nSpecial Thanks to *Not In Any Order*\r\nSkoob, Refrag and Sora.", "Credits");
        }
        private void MetroLabel50_MouseHover(object sender, EventArgs e)//popup for credits
        {
            toolTip1.Show("Click Me", metroLabel50);
        }
        private void ComboBox2_SelectedIndexChanged(object sender, EventArgs e)//change cpu tails
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (comboBox2.SelectedIndex == 0) //sonic
            {
                process.Write(0x0047EDC1, 0x0049A9B0);
            }
            if (comboBox2.SelectedIndex == 1)//tails
            {
                process.Write(0x0047EDC1, 0x00461700);
            }
            if (comboBox2.SelectedIndex == 2)//knuckles 
            {
                process.Write(0x0047EDC1, 0x0047A770);
            }
            if (comboBox2.SelectedIndex == 3)//amy
            {
                process.Write(0x0047EDC1, 0x0048ABF0);
            }
            if (comboBox2.SelectedIndex == 4)//gamma
            {
                process.Write(0x0047EDC1, 0x00483430);
            }
            if (comboBox2.SelectedIndex == 5)//big
            {
                process.Write(0x0047EDC1, 0x00490A00);
            }
        }
        private void ComboBox3_SelectedIndexChanged(object sender, EventArgs e)//change cpu sonic 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (comboBox3.SelectedIndex == 0) //sonic
            {
                process.Write(0x0047EDC1, 0x0049A9B0);
            }
            if (comboBox3.SelectedIndex == 1)//tails
            {
                process.Write(0x0047EDC1, 0x00461700);
            }
            if (comboBox3.SelectedIndex == 2)//knuckles 
            {
                process.Write(0x0047EDC1, 0x0047A770);
            }
            if (comboBox3.SelectedIndex == 3)//amy
            {
                process.Write(0x0047EDC1, 0x0048ABF0);
            }
            if (comboBox3.SelectedIndex == 4)//gamma
            {
                process.Write(0x0047EDC1, 0x00483430);
            }
            if (comboBox3.SelectedIndex == 5)//big
            {
                process.Write(0x0047EDC1, 0x00490A00);
            }
        }
        private void MetroCheckBox20_CheckedChanged(object sender, EventArgs e)// Movement Debug mode
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox20.Checked)
            {
                process.Write(0x03B29D08, 0x00000001);//sets Movement Debug mode on 
            }
            else
            {
                process.Write(0x03B29D08, 0x00000000);//sets Movement Debug off
            }
        }
        private void MetroCheckBox21_CheckedChanged(object sender, EventArgs e)//Collision Debug
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox21.Checked)
            {
                process.Write(0x03B0F0EC, 0x00);//Sets Collision Debug on
            }
            else
            {
                process.Write(0x03B0F0EC, 0xFF);//Sets Collision Debug off
            }
        }
        private void MetroButton6_Click(object sender, EventArgs e)//first task/object //masterobject ptr 03B42E30
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (TaskWkPtrNum != 0)
            {
                TaskWkStart = process.ReadInt32(TaskWkPtrNum);
                if (TaskWkStart != 0)
                {
                    TaskWkCurrent = TaskWkStart;
                }
                else
                {
                    MessageBox.Show("Please Select Another Pointer # Or There is No Tasks at selected pointer number", "Error");
                }
            }
            else
            {
                MessageBox.Show("Please Select a Pointer # Or There is No Tasks at selected pointer number", "Error");
            }
        }
        private void MetroButton7_Click(object sender, EventArgs e)//next task/object 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (TaskWkCurrent != 0 && process.ReadInt32(TaskWkCurrent) != 0)
            {
                TaskWkNext = process.ReadInt32(TaskWkCurrent);
                TaskWkCurrent = TaskWkNext;
            }
            else
            {
                MessageBox.Show("Please Get First Task Or There is No Next Object", "Error");
            }
        }
        private void ComboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (comboBox4.SelectedIndex == 8)
            {
                TaskWkPtrNum = 0x03B42E30;
            }
            else if (comboBox4.SelectedIndex == 9)
            {
                TaskWkPtrNum = 0x03C52500;
            }
            else if (comboBox4.SelectedIndex == 10)
            {
                TaskWkPtrNum = process.ReadInt32(0x03B3CDF0) + 0x68;
            }
            else
            {
                TaskWkPtrNum = 0x03ABDBC4 + 4 * comboBox4.SelectedIndex;
            }
        }
        private void MetroButton8_Click(object sender, EventArgs e)//Back
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (TaskWkCurrent != 0 && process.ReadInt32(TaskWkCurrent + 0x04) != 0)
            {
                TaskWkCurrent = process.ReadInt32(TaskWkCurrent + 0x04);
            }
            else
            {
                MessageBox.Show("There is no Prev task or you havent gotten the first task", "Error");
            }
        }
        private void MetroButton9_Click(object sender, EventArgs e)//custom
        {
            if (String.IsNullOrEmpty(metroTextBox6.Text))
            {
                MessageBox.Show("Please Insert Custom Task Pointer Into The Textbox.", "Error");
            }
            else
            {
                int CustomPointer = Convert.ToInt32(metroTextBox6.Text, 16);
                TaskWkCurrent = CustomPointer;
            }
        }
            private void MetroButton10_Click(object sender, EventArgs e)//SETObjData First
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            SETObjDataPtr = 0x03C4E464;
            SETObjDataCurrent = SETObjDataPtr;
            TaskWkCurrent = process.ReadInt32(SETObjDataCurrent);
        }
        private void MetroButton11_Click(object sender, EventArgs e)//SETObjData Next
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            TaskWkCurrent = process.ReadInt32(SETObjDataCurrent + 0x10);
            SETObjDataCurrent += 0x10;
        }
        private void MetroButton12_Click(object sender, EventArgs e)//SETObjData Back
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            TaskWkCurrent = process.ReadInt32(SETObjDataCurrent - 0x10);
            SETObjDataCurrent -= 0x10;
        }
        private void MetroButton13_Click(object sender, EventArgs e)//teleport to
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int PosPtr = process.ReadInt32(0x03B42E10);//Pos Pointer
            int PosX = PosPtr + 0x20;//Pos X
            int PosY = PosPtr + 0x24;//Pos Y
            int PosZ = PosPtr + 0x28;//Pos Z
            if (metroComboBox1.SelectedIndex != -1)
            {
                process.Write(PosX, Convert.ToSingle(TelePosX));
                process.Write(PosY, Convert.ToSingle(TelePosY));
                process.Write(PosZ, Convert.ToSingle(TelePosZ));
            }
            else
            {
                MessageBox.Show("Please Select Teleport Position", "Error");
            }

        }
        private void MetroComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (metroComboBox1.SelectedIndex == 0)//Emerald Coast Before Act 1
            {
                TelePosX = Convert.ToSingle(5539);
                TelePosY = Convert.ToSingle(4);
                TelePosZ = Convert.ToSingle(1109);
            }
            if (metroComboBox1.SelectedIndex == 1)//Windy Valley Torando
            {
                TelePosX = Convert.ToSingle(3023);
                TelePosY = Convert.ToSingle(-521);
                TelePosZ = Convert.ToSingle(-1492);
            }
            if (metroComboBox1.SelectedIndex == 2)//Windy Valley Top Of Tornado
            {
                TelePosX = Convert.ToSingle(-28);
                TelePosY = Convert.ToSingle(1801);
                TelePosZ = Convert.ToSingle(21);
            }
            if (metroComboBox1.SelectedIndex == 3)//Windy Valley Act 2 Spawn
            {
                TelePosX = Convert.ToSingle(1076);
                TelePosY = Convert.ToSingle(-338);
                TelePosZ = Convert.ToSingle(-1238);
            }
            if (metroComboBox1.SelectedIndex == 4)//Twinkle Park Track Start
            {
                TelePosX = Convert.ToSingle(-2000);
                TelePosY = Convert.ToSingle(1749);
                TelePosZ = Convert.ToSingle(-985);
            }
            if (metroComboBox1.SelectedIndex == 5)//Twinkle Park Track End
            {
                TelePosX = Convert.ToSingle(-6568);
                TelePosY = Convert.ToSingle(-6616);
                TelePosZ = Convert.ToSingle(23276);
            }
            if (metroComboBox1.SelectedIndex == 6)//Twinkle Park RC Skip
            {
                TelePosX = Convert.ToSingle(520);
                TelePosY = Convert.ToSingle(890);
                TelePosZ = Convert.ToSingle(1545);
            }
            if (metroComboBox1.SelectedIndex == 7)//Icecap Snowboard Skip
            {
                TelePosX = Convert.ToSingle(219);
                TelePosY = Convert.ToSingle(375);
                TelePosZ = Convert.ToSingle(-17);
            }

        }
        private void MetroCheckBox32_CheckedChanged(object sender, EventArgs e)//tails can play EC
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox32.Checked)
            {
                process.Write(0x004F6B00, 0x0AEB02F8);
            }
            else
            {
                process.Write(0x004F6B00, 0x0A7502F8);
            }
            
        }
        private void MetroCheckBox33_CheckedChanged(object sender, EventArgs e)//strong line
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox33.Checked)
            {
                process.Write(0x00470D1A, 0x98F2E1E9);
                process.Write(0x00470D1E, 0x7BEB9003);

            }
            else
            {
                process.Write(0x00470D1A, 0x252C1DD9);
                process.Write(0x00470D1E, 0x7BEB03C5);
            }
        }
        private void MetroLabel110_Click(object sender, EventArgs e)//motionwk copy
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkMotionWk = process.ReadInt32(TaskWkCurrent + 0x24);
            Clipboard.SetText(TaskWkMotionWk.ToString("X2"));
        }
        private void MetroLabel58_Click(object sender, EventArgs e)//task wk copy 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkTaskWk = process.ReadInt32(TaskWkCurrent + 0x20);
            Clipboard.SetText(TaskWkTaskWk.ToString("X2"));
        }
        private void MetroButton5_Click_1(object sender, EventArgs e)//Teleport task to me,
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (TaskWkCurrent != 0x0)
            {
                int SelectedTaskTaskWk = process.ReadInt32(TaskWkCurrent + 0x20);
                if (SelectedTaskTaskWk == 0x0)
                {
                    MessageBox.Show("Task Has No Task Worker", "Error");
                }
                else
                {
                    int SelectedTaskWkPosX = SelectedTaskTaskWk + 0x20;
                    int SelectedTaskWkPosY = SelectedTaskTaskWk + 0x24;
                    int SelectedTaskWkPosZ = SelectedTaskTaskWk + 0x28;
                    int PosPtr = process.ReadInt32(0x03B42E10);//Pos Pointer
                    int PosX = PosPtr + 0x20;//Pos X
                    int PosY = PosPtr + 0x24;//Pos Y
                    int PosZ = PosPtr + 0x28;//Pos Z
                    process.Write(SelectedTaskWkPosX, process.ReadSingle(PosX));
                    process.Write(SelectedTaskWkPosY, process.ReadSingle(PosY));
                    process.Write(SelectedTaskWkPosZ, process.ReadSingle(PosZ));
                }
            }
        }
        private void MetroButton16_Click(object sender, EventArgs e)//Set Selected Task Pos
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (TaskWkCurrent != 0x0)
            {
                int SelectedTaskTaskWk = process.ReadInt32(TaskWkCurrent + 0x20);
                if (SelectedTaskTaskWk == 0x0)
                {
                    MessageBox.Show("Task Has No Task Worker", "Error");
                }
                else
                {
                    int SelectedTaskWkPosX = SelectedTaskTaskWk + 0x20;
                    int SelectedTaskWkPosY = SelectedTaskTaskWk + 0x24;
                    int SelectedTaskWkPosZ = SelectedTaskTaskWk + 0x28;
                    if (String.IsNullOrEmpty(metroTextBox3.Text) || (String.IsNullOrEmpty(metroTextBox4.Text) || String.IsNullOrEmpty(metroTextBox5.Text)))
                    {
                        MessageBox.Show("Please Insert Position into the Three Textbox's", "Error");
                    }
                    else
                    {
                        process.Write(SelectedTaskWkPosX, Convert.ToSingle(metroTextBox3.Text));//sets pos to the float values in textbox
                        process.Write(SelectedTaskWkPosY, Convert.ToSingle(metroTextBox4.Text));//sets pos to the float values in textbox
                        process.Write(SelectedTaskWkPosZ, Convert.ToSingle(metroTextBox5.Text));//sets pos to the float values in textbox
                    }
                }
            }
        }
        private void MetroLabel98_Click(object sender, EventArgs e)//taskwk copy 
        {
            
            Clipboard.SetText(TaskWkCurrent.ToString("X2")); 
        }
        private void MetroLabel27_Click(object sender, EventArgs e)//main sub copy
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkMain = process.ReadInt32(TaskWkCurrent + 0x10);
            Clipboard.SetText(TaskWkMain.ToString("X2"));
        }
        private void MetroLabel26_Click(object sender, EventArgs e)//display sub copy
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkDisplay = process.ReadInt32(TaskWkCurrent + 0x14);
            Clipboard.SetText(TaskWkDisplay.ToString("X2"));
        }
        private void MetroLabel25_Click(object sender, EventArgs e)//delete sub copy
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkDel = process.ReadInt32(TaskWkCurrent + 0x18);
            Clipboard.SetText(TaskWkDel.ToString("X2"));

        }
        private void MetroLabel24_Click(object sender, EventArgs e)//task cond copy
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int TaskWkObjCon = process.ReadInt32(TaskWkCurrent + 0x1C);
            Clipboard.SetText(TaskWkObjCon.ToString("X2"));
        }
        private void MetroCheckBox37_CheckedChanged(object sender, EventArgs e)//"'?' Ring Box Always Gives 40 Rings
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox37.Checked)
            {
                process.Write(0x007E6FE4, 0x00400040);
                process.Write(0x007E6FE8, 0x00400040);
                process.Write(0x007E6FEC, 0x00400040);
            }
            else
            {
                process.Write(0x007E6FE4, 0x00050001);
                process.Write(0x007E6FE8, 0x000F000A);
                process.Write(0x007E6FEC, 0x00280014);
            }
            
        }
        private void MetroCheckBox38_CheckedChanged(object sender, EventArgs e)//Reduce Light Speed Dash Charge Time
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox38.Checked)
            {
                process.Write(0x00495086, 0x0044);
                process.Write(0x00495097, 0x0078);
            }
            else
            {
                process.Write(0x00495086, 0x0078);
                process.Write(0x00495097, 0x00D2);
            }
        }
        private void MetroCheckBox39_CheckedChanged(object sender, EventArgs e)//Disable Saving
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox39.Checked)
            {
                process.Write(0x00422161, 0x90909090);
                process.Write(0x00422175, 0x90909090);
                process.Write(0x004221B0, 0x90909090);

            }
            else
            {
                process.Write(0x00422161, 0x222C80E8);
                process.Write(0x00422175, 0x222D0FE8);
                process.Write(0x004221B0, 0x222AC8E8);
            }
        }
        private void MetroCheckBox40_CheckedChanged(object sender, EventArgs e)//Disable Cutscenes 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox40.Checked)
            {
                process.Write(0x004311CA, 0x026A9090);
            }
            else
            {
                process.Write(0x004311CA, 0x026AD6FF);
            }
        }
        private void MetroCheckBox41_CheckedChanged(object sender, EventArgs e)//Skip credits 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            if (metroCheckBox41.Checked)
            {
                process.Write(0x00641232, 0x05C79090);
            }
            else
            {
                process.Write(0x00641232, 0x0306C609);
            }
        }
        private void MetroButton17_Click(object sender, EventArgs e)//Run ACE 
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int IntPrt = process.ReadInt32(0x03B3CDF0);//gets Pointer Address
            int HeldObjPtr = IntPrt + 0x68;//gets held object address from pointer

            if (process.ReadInt32(HeldObjPtr) != 0)
            {
                if (process.ReadInt32(CurrentChao) == 0x00)
                {
                    MessageBox.Show("Please Make Sure Named Chao Is Selected And You Must Have Entered The Chao Garden Atleast Once.", "Error");
                }
                if (HeldObjPtr == 0)
                {
                    MessageBox.Show("Please Make Sure SRM is Activated", "Error");
                }
                uint NextObjPter = process.ReadUInt32(HeldObjPtr);
                uint MainObjSubPtr = NextObjPter + 0x10;
                MainObjSubPtrOLD = process.ReadInt32(MainObjSubPtr);
                process.Write(MainObjSubPtr, (uint)CurrentChao);
                

            }
            else
            {
                MessageBox.Show("Please Check Current Held Task", "Error");
            }
        }
        private void ComboBox5_SelectedIndexChanged(object sender, EventArgs e)//current selected chao name
        {
            if (comboBox5.SelectedIndex == 0) //chao 1
            {
                CurrentChao = 0x03C8888A;
            }
            if (comboBox5.SelectedIndex == 1)
            {
                CurrentChao = 0x03C8888A + 0x800; 
            }
            if (comboBox5.SelectedIndex == 2)
            {
                CurrentChao = 0x03C8888A + 0x1000;
            }
            if (comboBox5.SelectedIndex == 3)
            {
                CurrentChao = 0x03C8888A + 0x1800;
            }
            if (comboBox5.SelectedIndex == 4)
            {
                CurrentChao = 0x03C8888A + 0x2000;
            }
            if (comboBox5.SelectedIndex == 5)
            {
                CurrentChao = 0x03C8888A + 0x2800;
            }
            if (comboBox5.SelectedIndex == 6)
            {
                CurrentChao = 0x03C8888A + 0x3000;
            }
            if (comboBox5.SelectedIndex == 7)
            {
                CurrentChao = 0x03C8888A + 0x3800;
            }
            if (comboBox5.SelectedIndex == 8)
            {
                CurrentChao = 0x03C8888A + 0x4000;
            }
            if (comboBox5.SelectedIndex == 9)
            {
                CurrentChao = 0x03C8888A + 0x4800;
            }
        }
        private void MetroButton18_Click(object sender, EventArgs e)//set little debuggies
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            process.Write(CurrentChao, 0xc303b29d0805fe); //FE 05 08 9D B2 03 C3
        }
        private void MetroButton19_Click(object sender, EventArgs e)//disables ACE override
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int IntPrt = process.ReadInt32(0x03B3CDF0);//gets Pointer Address
            int HeldObjPtr = IntPrt + 0x68;//gets held object address from pointer
            uint NextObjPter = process.ReadUInt32(HeldObjPtr);
            uint MainObjSubPtr = NextObjPter + 0x10;
            process.Write(MainObjSubPtr, MainObjSubPtrOLD);
            if (process.ReadByte(0x03B29D08) !=0)//diables debug mode
            {
                process.Write(0x03B29D08, 0x0);
            }
        }
        private void MetroCheckBox42_CheckedChanged(object sender, EventArgs e)//lock object ace tab
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            int ptr = process.ReadInt32(0x03B3CDF0);
            int offset = ptr + 0x68;
            int value = process.ReadInt32(offset);
            LockedObj = value;
        }
        private void MetroButton20_Click(object sender, EventArgs e)//super sonic story chao ace,
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            process.Write(CurrentChao, 0x07FAE950);
            process.Write(CurrentChao + 0x800, 0x27F9E9FEB0);
            process.Write(CurrentChao + 0x3000, 0xC35803B2B610A2);
        }
        private void MetroButton21_Click(object sender, EventArgs e)//Mystic Ruins Flag Ace
        {
            Process[] localByName = Process.GetProcessesByName(metroTextBox1.Text);
            Process process = localByName[0];
            process.Write(CurrentChao, 0x07FAE950);
            process.Write(CurrentChao + 0x800, 0x27F9E9FEB0);
            process.Write(CurrentChao + 0x3000, 0xC35803B2B61BA2);
        }
    }
}
